name: Deploy branches to channels

on:
  push:
    branches: '**'

env:
  node_version: '18.x'
  project-directory: ./

jobs:
  prepare:
    name: get deploy configuration
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.branch-names.outputs.current_branch }}
      channel: ${{ steps.get-channel.outputs.channel }}
      S3_BUCKET: ${{ steps.resolver.outputs.S3_BUCKET }}
      S3_ACCESS_KEY_ID: ${{ steps.resolver.outputs.S3_ACCESS_KEY_ID }}
      S3_SECRET_ACCESS_KEY: ${{ steps.resolver.outputs.S3_SECRET_ACCESS_KEY }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8

      - name: Get npm version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master

      - name: Get channel information
        id: get-channel
        run: |
          BRANCH_NAME="${{ steps.branch-names.outputs.current_branch }}"
          content=$(<.releaserc)
          branches=$(jq -r '.branches | keys[]' <<< "$content")
          for branch in $branches; do
            branch_name=$(jq -r ".branches[$branch].name" <<< "$content")
            if [[ "$BRANCH_NAME" =~ $branch_name ]]; then
              channel=$(jq -r ".branches[$branch].channel" <<< "$content")
              echo "::set-output name=channel::$channel"
              exit 0
            fi
          done
          echo "No channel found for branch $BRANCH_NAME"
          exit 1
        shell: bash

      - name: Get deploy token
        id: resolver
        run: |
          CHANNEL="${{ steps.get-channel.outputs.channel }}"
          case "$CHANNEL" in
            "rc")
              echo "::set-output name=DIGITALOCEAN_TOKEN::${{ secrets.DEV_CDN_S3_BUCKET }}"
              echo "::set-output name=S3_ACCESS_KEY_ID::${{ secrets.DEV_ACCESS_KEY_ID }}"
              echo "::set-output name=S3_SECRET_ACCESS_KEY::${{ secrets.DEV_SECRET_ACCESS_KEY }}"  
              ;;
            "alpha")
              echo "::set-output name=DIGITALOCEAN_TOKEN::${{ secrets.DEV_CDN_S3_BUCKET }}"
              echo "::set-output name=S3_ACCESS_KEY_ID::${{ secrets.DEV_ACCESS_KEY_ID }}"
              echo "::set-output name=S3_SECRET_ACCESS_KEY::${{ secrets.DEV_SECRET_ACCESS_KEY }}"
              ;;
            *)
              echo "No token found for channel $CHANNEL"
              exit 1
              ;;
          esac
        shell: bash
    
  frontend:
    name: Build Frontend Project
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      !contains(github.event.head_commit.message, 'skip-ci')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Use Node.js 21.x
        uses: actions/setup-node@v1
        with:
          node-version: '21.x'
      - name: Install dependencies
        run: |
          npm ci
          cd apps/web/&& npm ci
      - name: build
        run: cd apps/web/ && npm run build
        working-directory: ${{ env.project-directory }}
      - uses: actions/upload-artifact@v2
        with:
          name: frontend-bundle
          path: build
  
  deploy:
    name: Deploy to S3
    runs-on: ubuntu-latest
    needs: ['prepare', 'frontend']
    if: |
      github.repository == ${{ github.env.repository }}
    steps:
      - name: Print env
        run: |
          echo "S3_BUCKET: ${{ needs.prepare.outputs.S3_BUCKET }}"
          echo "S3_ACCESS_KEY_ID: ${{ needs.prepare.outputs.S3_ACCESS_KEY_ID }}"
        shell: bash
      - name: Download bundle frontend resources
        uses: actions/download-artifact@v2
        with:
          name: frontend-bundle
          path: build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ needs.prepare.outputs.S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ needs.prepare.outputs.S3_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
        
      - name: Copy frontend resources to S3
        run: |
          aws s3 sync /apps/web/public s3://${{secrets[needs.prepare.outputs.S3_BUCKET]}} --delete
        env:
          AWS_DEFAULT_REGION: us-east-2